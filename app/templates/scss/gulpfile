'use strict';
var path = require('path')
var gulp = require('gulp')
var colors = require('colors')
var kmc = require('gulp-kmc')
var kmd = require('gulp-kmd')
var clean = require('gulp-clean')
var copy = require('gulp-copy')
var uglify = require('gulp-uglify')
var jshint = require('gulp-jshint')
var stylish = require('jshint-stylish')
var beautify = require('gulp-beautify')
var rename = require('gulp-rename')
var code = require('gulp-code')
var replace = require('gulp-replace')
var cssmin = require('gulp-cssmin')
var XTemplate = require('xtemplate')
var gulpXTemplate = require('gulp-xtemplate')
var gulpCompass = require('gulp-compass-compile')

var pkg = require('./package.json')

var pathsConfig = {
  src: './src',
  dest: './build',
  js: ['src/**/*.js', '!src/**/*-min.js'],
  scss: ['src/**/*.scss', '!src/**/_*.scss'],
  images: ['src/*/images/*.*', '!src/*/images/_*.*'],
  xtpl: ['src/**/*.xtpl']
};
kmc.config({
  // depFilePath: 'mods-dep.js', //全局依赖文件关系，此处配置后下面的各个模块将不会再生成
  packages: [{
    name: pkg.packageName,
    combine: true,
    base: pathsConfig.src
  }]
});
/********************************************/
gulp.task('clean:all', function() {
  return gulp.src('build/').pipe(clean())
});
gulp.task('clean:css', function() {
  return gulp.src('build/**/*.css').pipe(clean())
});
gulp.task('clean:xtpl', function() {
  return gulp.src(['build/**/views/*.js']).pipe(clean())
});
gulp.task('clean:js', function() {
  return gulp.src(['build/**/*.js', '!build/**/views/*.js']).pipe(clean())
});
/********************************************/
gulp.task('kmc', ['clean:js'], function() {
  return gulp.src(pathsConfig.js)
    .pipe(code.lint())
    .pipe(kmc.convert())
    .pipe(beautify({
      'indentSize': 2,
      'preserveNewlines': false
    }))
    .pipe(gulp.dest(pathsConfig.dest))
    .pipe(replace(/@DEBUG@/g, ''))
    .pipe(uglify({
      'output': {
        'ascii_only': true
      }
    }))
    .pipe(rename({
      suffix: '-min'
    }))
    .pipe(gulp.dest(pathsConfig.dest))
});
gulp.task('xtpl', ['clean:xtpl'], function() {
  return gulp.src(pathsConfig.xtpl)
    .pipe(gulpXTemplate({
      wrap: 'kissy', // defaults to modulex. set to define compiled to define() or kissy to KISSY.add
      XTemplate: XTemplate // required. xtemplate module
    }))
    .pipe(kmd())
    .pipe(kmc.convert())
    .pipe(beautify({
      'indentSize': 2,
      'preserveNewlines': false
    }))
    .pipe(gulp.dest(pathsConfig.dest))
    .pipe(uglify({
      'output': {
        'ascii_only': true
      }
    }))
    .pipe(rename({
      suffix: '-min'
    }))
    .pipe(gulp.dest(pathsConfig.dest))
});
gulp.task('scss', ['clean:css'], function() {
  return gulp
    .src(pathsConfig.scss)
    .pipe(gulpCompass({
      logger: true
    }))
    .pipe(cssmin())
    .pipe(rename({
      suffix: '-min'
    }))
    .pipe(gulp.dest(pathsConfig.dest))
    .on('end', function() {
      gulp.start(['copyImages'])
    })
})
gulp.task('copyImages', function() {
  return gulp
    .src(pathsConfig.images)
    .pipe(copy(pathsConfig.dest, {
      prefix: 1
    }))
})
/********************************************/
gulp.task('lint', function() {
  return gulp
    .src(['src/**/*.js', '!src/**/*min.js'])
    .pipe(jshint('.jshintrc'))
    .pipe(jshint.reporter(stylish))
})

gulp.task('watch', function() {
  gulp.watch(pathsConfig.js, ['kmc'])
    .on('change', function(event) {
      console.log('> 文件类型:'.green, path.extname(event.path).toUpperCase().yellow, '=>'.red, event.path.yellow, event.type)
    });
  gulp.watch(pathsConfig.scss, ['scss'])
    .on('change', function(event) {
      console.log('> 文件类型:'.green, path.extname(event.path).toUpperCase().yellow, '=>'.red, event.path.yellow, '发生', event.type)
    });
  gulp.watch(pathsConfig.xtpl, ['xtpl'])
    .on('change', function(event) {
      console.log('> 文件类型:'.green, path.extname(event.path).toUpperCase().yellow, '=>'.red, event.path.yellow, '发生', event.type)
    });
});
/*****************************************/
gulp.task('build', ['clean:all'], function() {
  gulp.start(['kmc', 'scss', 'xtpl']);
});
gulp.task('default', ['kmc', 'scss', 'xtpl']);
