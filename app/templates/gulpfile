'use strict';
var path = require('path');
var gulp = require('gulp');
var kmc = require('gulp-kmc');
var clean = require('gulp-clean');
var uglify = require('gulp-uglify');
var beautify = require('gulp-beautify');
var rename = require('gulp-rename');
var less = require('gulp-less')
var code = require('gulp-code');
var replace = require('gulp-replace');
var cssmin = require('gulp-cssmin')

var pkg = require('./package.json')

var paths = {
  src: './src',
  dest: './build',
  js: ['src/**/*.js', '!src/**/*-min.js'],
  less: ['src/*/*.less', '!src/*/_*.less']
};
kmc.config({
  // depFilePath: 'mods-dep.js', //全局依赖文件关系，此处配置后下面的各个模块将不会再生成
  packages: [{
    name: pkg.packageName,
    combine: true,
    base: paths.src
  }]
});

gulp.task('clean', function() {
  return gulp.src('build/')
    .pipe(clean())
});
gulp.task('kmc', ['clean'], function() {
  return gulp.src(paths.js)
    .pipe(code.lint())
    .pipe(kmc.convert())
    .pipe(beautify({
      'indentSize': 2,
      'preserveNewlines': false
    }))
    .pipe(gulp.dest(paths.dest))
});
gulp.task('uglify', ['kmc'], function() {
  return gulp.src(['build/**/*.js', '!build/**/*-min.js'])
    .pipe(replace(/@DEBUG@/g, ''))
    .pipe(uglify({
      'output': {
        'ascii_only': true
      }
    }))
    .pipe(rename({
      suffix: '-min'
    }))
    .pipe(gulp.dest(paths.dest))
});
gulp.task('less', ['clean'], function() {
  return gulp
    .src(paths.less)
    .pipe(less())
    .pipe(gulp.dest(paths.dest))
    .pipe(cssmin())
    .pipe(rename({
      suffix: '-min'
    }))
    .pipe(gulp.dest(paths.dest))
});

gulp.task('watch', function() {
  gulp.watch(path.js, ['uglify'])
    .on('change', function(event) {
      console.log('文件' + event.path + '有变更,运行uglify任务');
    });
});
gulp.task('default', ['less', 'uglify']);
